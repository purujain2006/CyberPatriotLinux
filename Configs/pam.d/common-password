#
# /etc/pam.d/common-password - password-related modules common to all services
#
# This file is included from other service-specific PAM config files,
# and should contain a list of modules that define the services to be
# used to change user passwords.  The default is pam_unix.
# Explanation of pam_unix options:
#
# The "sha512" option enables salted SHA512 passwords.  Without this option,
# the default is Unix crypt.  Prior releases used the option "md5".
#
# The "obscure" option replaces the old `OBSCURE_CHECKS_ENAB' option in
# login.defs.
#
# See the pam_unix manpage for other options.
# As of pam 1.0.1-6, this file is managed by pam-auth-update by default.
# To take advantage of this, it is recommended that you configure any
# local modules either before or after the default block, and use
# pam-auth-update to manage selection of other modules.  See
# pam-auth-update(8) for details.
#
# SECURITY-SCRIPT ADDITION: Password complexity module
#


# Comments
################################################################################################################################

# Lines are structured by

# (service) [type] [control] [ module path ] [ module arguments ]

# service is optional, and if not present, is the name of the file
# the service for common-password is "common-password"

# service (servicename) --> service names, ex. su, login


# password (type) --> this module type is required for updating the authentication token associated with the user. Typically, there is one module for each 'challenge/response' based authentication (auth) type.

# required (control) --> if this module fails, then PAM will run all the modules anyway BUT will ultimately return a fail. (better for logging) 
# requisite (control) --> if this module fails, then PAM stops checking completely and returns the fail/pass code to the application which decides what to do with it)

# pwquality.so --> password strength checking
# pwhistory.so --> check old passwords 
# deny.so --> fail PAM authentication
# permit.so --> allow PAM authentication

################################################################################################################################




# Explanation of modules
################################################################################################################################
# [blank service] for the service common-password 

# [password] --> update the authentication token depending on 
# [requisite] --> how (common-password) reacts to the status of the check done by  (if fail, don't proceed)
# [pam_pwquality.so] -->  the pwquality module
# [retry, minlen, etc.] --> if the requirements/arguments are [retry = 3, etc.]

# retry = 3; only 3 attempts to login
# minlen = 15; 15 characters minimum
# difok = 8; 8 characters must be different across passwords
# ucredit, lcredit, ocredit, dcredit; require 1 number, alphanumeric, uppercase, lowercase
# reject_username; not allowed to use username
# maxrepeat; only allowed to repeat a character certain amount of times
# gecoscheck; not allowed to use personal info
# enforce_for_root; passwords must be like this even if root is changing them

# Note that this is the first line, so use_authtok isnt being used, requires entering passwordv (will explain later in file)

password	requisite			pam_pwquality.so retry=3 minlen=15 difok=8 ucredit=-1 lcredit=-1 dcredit=-1 ocredit=-1 reject_username maxrepeat=2 gecoscheck enforce_for_root


# [password] --> update the authentication token depending on 
# [required] --> if the next module fails/suceeds (still all the other modules though)
# [pam_pwhistory.so] -->  which is if the pwhistory module
# [use_authtok remember] --> returns fail/pass based on these arguments

# use_authtok; If a module requests a password, use_authtok ensures that this password is used for all subsequent modules that require authentication, avoiding the need for the user to re-enter it.
# Basically use_authtok is used to import the password from the above module. (pwquality)

# remember; cannot reuse past N passwords

password	required			pam_pwhistory.so use_authtok remember=5


# [password] --> update the authentication token depending on 
# [success=1] --> skip the next 1 module (deny.so)
# [default=ignore] --> if error returned or failed, don't skip and continue to deny.so
# [pam_unix.so] --> log the password hash and put it in /etc/passwd, /etc/shadow etc.
# [obscure, etc.] --> based on

# Also uses use_authtok to import it from pwhistory
# sha512; encryption
# rounds; amount of time its encrypted

password	[success=1 default=ignore]	pam_unix.so obscure use_authtok try_first_pass sha512 rounds=8000

################################################################################################################################

# here's the fallback if no module succeeds

# deny, and  quit PAM
password	requisite			pam_deny.so

# prime the stack with a positive return value if there isn't one already;
# this avoids us returning an error just because nothing sets a success code
# since the modules above will each just jump around

# allow and pass
password	required			pam_permit.so

# and here are more per-package modules (the "Additional" block)
#gnome stuff don't worry about it

password	optional	pam_gnome_keyring.so 
# end of pam-auth-update config


# Full stack
# password	requisite			pam_pwquality.so retry=3 minlen=15 difok=8 ucredit=-1 lcredit=-1 dcredit=-1 ocredit=-1 reject_username maxrepeat=2 gecoscheck enforce_for_root
# password	required			pam_pwhistory.so use_authtok remember=5
# password	[success=1 default=ignore]	pam_unix.so obscure use_authtok try_first_pass sha512 rounds=8000
# password	requisite			pam_deny.so
# password	required			pam_permit.so
# password	optional	pam_gnome_keyring.so 